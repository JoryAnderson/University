CSC 360 A2 Notes:

Global Variables:
	TrainStack
	westStation
	eastStation
	currTime
	trainsReady

Train:
	int tid;
	String dir;
	bool isLoaded
	int priority;
	int loadingTime;
	int crossTime;
	

1. How many threads are you going to use? Specify the work that you intend 
each thread to perform.

	- Beyond the main process, there will be two threads performing work: 
	"timeLookup" and "crossingFunction".

	crossingFunction:
		Train = Stack.pop()
		if trainsReady == 0
			pthread_cond_wait(&crossingFunctionMutex)
		if pthread_mutex_trylock == 0
			pthread_mutex_lock(&crossingFunctionMutex)
		print("Train X has left station Y1")
		currCrossingTime = 0
		while(currCrossingTime < Train.crossTime)
			currCrossingTime++
			currTime++
			usleep()
			if westStation.size() + eastStation.size() > 0
				new thread for timeLookup
				timeLookup.join()
		print("Train X has arrived at station Y2")
		trainsReady--
		pthread_mutex_unlock(&crossingFunctionMutex)

	timeLookup:
		pthread_mutex_lock(&timeLookupMutex)
		for each train:
			if currTime == Train.loadingTime:
					print("Train X is ready to depart from Y-bound station!")
					Train.isLoaded = true
					trainsReady++
					StationList.remove(Train)
					if trainsReady == 1
						pthread_cond_signal(&crossingFunctionMutex)
		while trainsReady == 0:
			currTime++
			usleep()
			for each train:
				if currTime == Train.loadingTime:
						print("Train X is ready to depart from Y-bound station!")
						Train.isLoaded = true
						trainsReady++
						StationList.remove(Train)
						if trainsReady == 1
							pthread_cond_signal(&crossingFunctionMutex)
		pthread_mutex_unlock(&timeLookupMutex)

2. Do the threads work independently? Or, is there an overall 
“controller”thread?

	- The main process will wait for crossingFunction to return befroe beginning to queue up another train. I suppose the main process is the controller.
		- The main process will call and wait for timeLookup to complete only when there are no trains currently loaded

	- The two threads mentioned in the previous question work independently. timeLookup needs to check if other trains are being loaded while crossingFunction is executing

3. How many mutexes are you going to use? Specify the operation that each mutex will guard.

	- Only one. The design of the program will allow crossingFunction to only be called one at a time. Despite this, a mutex will be used to ensure only one train is crossing at a time.

4. Will the main thread be idle? If not, what will it be doing?
	- As mentioned previously, the main thread waits for crossingFunction to complete before queueing (or waiting) for the next train.
	- If the main process is forced to wait for a train to be loaded, it will continue incrementing the time and checking for any loaded trains

5. How are you going to represent stations (which are collections of loaded 
trains ready to depart)? That is, what type of data structure will you use?

	- I plan on using a linked list with nodes consisting of "Train" objects to represent each station (West vs East). As the input is parsed, the main process will create Trains for each line of input and store them in the appropriate linked list.
	
	- To simplify the crossingFunction thread, an absolute train order will be organized using a single stack consisting of train objects. 
	
	- crossingFunction will access from the stack, while timeLookup will read train loading times from each station linked list.

	Train:
	int tid;
	String dir;
	bool isLoaded
	int priority;
	int loadingTime;
	int crossTime;

6. How are you going to ensure that data structures in your program will not 
be modified concurrently?
	
	- The linked lists and stack are constructed before any new threads are created.
	
	- timeLookup only reads the loading times from each train. The linked lists can be made read-only after construction
	
	- crossingFunction pops the next available train from the top of the stack within the critical section. 

7. How many convars are you going to use? 1
	For each convar:
		(a) Describe the condition that the convar will represent.
			- The condition: No trains are ready (No trains in stack)
			- Signals when: Train is added to stack (Stack.size == 1 after insert)

		(b) Which mutex is associated with the convar? Why?
			- crossingFunctionMutex. A train cannot cross if there is no train that needs to cross. As such, crossingFunction will wait for a signal from timeLookup before allowing a train to cross.
			
		(c) What operation should be performed once pthread cond wait() has 
		been unblocked and re-acquired the mutex?
			- Allow the available train to immediately cross

8. In 15 lines or less, briefly sketch the overall algorithm you will use. 

	Main thread:
		- Parse input file
		- Split trains into their respective stations (west vs east)
		- Sort:
			- Sort each station by priority
			- Sort each station by loading time
			- Check for duplicate priorities/loading times b/w stations. If 
			duplicate, The one that does not match the current direction goes 
			first
			- Consolidate train order into stack
		- while Stack.size() > 0:
			if westStation.size() + eastStation.size > 0
				- new Thread for timeLookup
			- new Thread for crossingFunction
			- crossingFunction.join()

	(details for crossingFunction and timeLookup noted in earlier questions)